barplot(aa,
col = c('red', 'blue'),
main = '타이타닉호 생존수와 사망수',
ylim = c(0,600),
cex.axis = 0.9,
xlab = '생존여부',
ylab = '인원수',
names = c("사망", '생존'),
)
# smart한 방법
data <- c()
line <- 0.7
#text(line, data+20000, data)
for (i in 1:ncol(num)) {
data <- num[,i]
text(line, data+30, data)
line = line+1.2
}
head(train_df)
str(train_df)
unique(train_df$Sex)
train_df$Sex <- factor(train_df$Sex)
str(train_df)
maleCount <- nrow(subset(train_df, train_df$Sex=='male'))
femaleCount <- nrow(subset(train_df, train_df$Sex=='female'))
maleCount
femaleCount
femaleSurvive <- nrow(subset(train_df, (Sex=='female') & (Survived==1)))
femaleDeath <-nrow(subset(train_df, train_df$Sex=='female' & train_df$Survived==0))
femaleSurviveRatio <- round(femaleSurvive / sum(femaleSurvive+femaleDeath)*100, 2)
femaleDeathRatio <- round(femaleDeath / sum(femaleSurvive+femaleDeath)*100, 2)
femaleSurviveRatio
femaleDeathRatio
maleSurvive <- nrow(subset(train_df, train_df$Sex=='male' & train_df$Survived==1))
maleDeath <- nrow(subset(train_df, train_df$Sex=='male' & train_df$Survived==0))
maleSurviveRatio <- round(maleSurvive / sum(maleSurvive+maleDeath)*100, 2)
maleDeathRatio <- round(maleDeath / sum(maleSurvive+maleDeath)*100, 2)
maleSurviveRatio
maleDeathRatio
femaleRatio <- data.frame(생존 = femaleSurviveRatio, 사망 = femaleDeathRatio)
femaleRatio
maleRatio <- data.frame(생존 = maleSurviveRatio, 사망 = maleDeathRatio)
maleRatio
labelFR <- paste(colnames(femaleRatio), "\n", femaleRatio[1,], "%")
par(family='AppleGothic')
pie3D(as.matrix(femaleRatio),
col = c('aquamarine1', 'red'),
labels = labelFR,
labelcex = 0.9,
explode = 0.1,
main = '타이타닉호 여성 생존율'
)
labelMR <- paste(colnames(maleRatio), "\n", maleRatio[1,], "%")
par(family='AppleGothic')
pie3D(as.matrix(maleRatio),
col = c('aquamarine1', 'red'),
labels = labelMR,
labelcex = 0.9,
explode = 0.1,
main = '타이타닉호 남성 생존율'
)
maleSum <- sum(maleSurvive+maleDeath)
femaleSum <- sum(femaleSurvive+femaleDeath)
tt <- data.frame(여성=femaleSum, 남성 = maleSum)
tt
par(family='AppleGothic')
barplot(c(femaleSum, maleSum),
col = c('red', 'blue'),
main = '성별 승선 인원수',
ylim = c(0,650),
cex.axis = 0.9,
xlab = '성별',
ylab = '승선인원수',
names = c("여성", '남성'),
)
# smart한 방법
data <- c()
line <- 0.7
#text(line, data+20000, data)
for (i in 1:ncol(tt)) {
data <- tt[,i]
text(line, data+25, data)
line = line+1.2
}
head(train_df)
table(train_df$Pclass)
train_df$Pclass <- factor(train_df$Pclass)
str(train_df)
femaleCount1st <- sum(nrow(subset(train_df, (Sex=='female') & (Pclass==1))))
femaleCount1stSurvived <- sum(nrow(subset(train_df, (Sex=='female') & (Pclass==1) & (Survived==1))))
cat('1등 객실의 여성 생존율은', round(femaleCount1stSurvived / femaleCount1st*100, 2), "%")
gender <- c('female', 'male')
for(j in gender){
for(i in 1:3){
femaleCountP <- nrow(subset(train_df, (Sex==j) & (Pclass==i)))
femaleCountPSurvived <- nrow(subset(train_df, (Sex==j) & (Pclass==i) & (Survived==1)))
cat(i,'등 객실의 ',ifelse(j=='female','여성','남성'), ' 생존율',round(femaleCountPSurvived / femaleCountP * 100, 2), '%\n')
}
cat('==================================\n')
}
unique(train_df$Embarked)
train_df$Embarked <- factor(train_df$Embarked)
str(train_df)
subset(train_df, Embarked == '') #fctr: factor
# S
sum(train_df$Embarked == 'S')
# C
sum(train_df$Embarked == 'C')
# Q
sum(train_df$Embarked == 'Q')
train_df$Embarked[train_df$Embarked==''] <- 'S'
sum(train_df$Embarked == 'S')
str(train_df)
#>>embarked 아직 4개 factor
table(train_df$Embarked)
train_df$Embarked <- factor(train_df$Embarked)
str(train_df)
par(family='AppleGothic')
barplot(table(train_df$Sex, train_df$Embarked),
beside = T,
col = c('red','blue'),
main = '성별 항구별 인원수',
ylim = c(0,650),
cex.axis = 0.9,
xlab = '항구별',
ylab = '성별',
names = c(colnames(table(train_df$Sex, train_df$Embarked))),
legend.text = T
)
par(family='AppleGothic')
barplot(table(train_df$Survived, train_df$Embarked),
beside = T,
col=c('red','blue'),
main = '항구별 생존 인원수',
ylim = c(0,650),
cex.axis = 0.9,
xlab = '항구별',
ylab = '인원수',
names = c(colnames(table(train_df$Survived, train_df$Embarked))),
)
legend(
#표시할 좌표 위치
1, 600,
c('사망','생존'),
col=c('red','blue'),
#pch default = 21
pch = c(15,15),
#범례가 그래프를 가리면 안됨 그래서 사이즈 조정해야 됨(default = 1)
cex = 1.2,
)
par(family='AppleGothic')
barplot(table(train_df$Pclass, train_df$Embarked),
beside = T,
col=c('red','blue','yellow'),
main = '항구별 객실 등급별 인원',
ylim = c(0,500),
cex.axis = 0.9,
xlab = '항구별',
ylab = '인원수',
names = c(colnames(table(train_df$Pclass, train_df$Embarked))),
)
legend(
#표시할 좌표 위치
1, 450,
c(rownames(table(train_df$Pclass, train_df$Embarked))),
col=c('red','blue','yellow'),
#pch default = 21
pch = c(15,15),
#범례가 그래프를 가리면 안됨 그래서 사이즈 조정해야 됨(default = 1)
cex = 1,
)
cor(train_df$Survived, as.numeric(train_df$Pclass))
train_df_T <- train_df
target_col <- c('Survived', 'Sex', 'Pclass', 'Embarked')
head(train_df_T[,target_col])
train_df_T$SexCode[train_df_T$Sex == 'male'] <- 0
train_df_T$SexCode[train_df_T$Sex == 'female'] <- 1
head(train_df_T)
train_df_T <- subset(train_df_T, select = -Sex)
head(train_df_T)
target_col <- c('Survived', 'SexCode', 'Pclass', 'Embarked')
head(train_df_T[,target_col])
train_df_T$Embarked_C = train_df_T$Embarked == 'C'
train_df_T$Embarked_S = train_df_T$Embarked == 'S'
train_df_T$Embarked_Q = train_df_T$Embarked == 'Q'
head(train_df_T[c('Embarked', 'Embarked_C', 'Embarked_S', 'Embarked_Q')])
target_col = c('Survived', 'Pclass', 'SexCode', 'Embarked_C', 'Embarked_S', 'Embarked_Q')
head(train_df_T[target_col])
library(caret)
set.seed(1234)
samp <- createDataPartition(train_df_T$Survived, p=0.7, list=F)
data.train <- train_df_T[samp,]
data.test <- train_df_T[-samp,]
samp
data.train
data.test
train_data <- data.train[target_col]
head(train_data)
test_data <- data.test[target_col]
library(randomForest)
rf <- randomForest(Survived ~ ., data = train_data, ntree=100)
x <- subset(test_data, select = -Survived)
y <- test_data$Survived
pred <- predict(rf, x)
head(pred)
pred[pred <= 0.5] <- 0
pred[pred > 0.5] <- 1
head(pred)
#rf
#x
#y
#pred
mean(pred == y)
table(pred, y)
train_data$Survived <- as.factor(train_data$Survived)
test_data$Survived <- as.factor(test_data$Survived)
str(train_data)
str(test_data)
rf <- randomForest(Survived ~ ., data=train_data, ntree=100)
x <- subset(test_data, select = -Survived)
pred <- predict(rf, x)
head(pred)
mean(pred == test_data$Survived)
table(pred, test_data$Survived)
library(nnet)
model.nnet <- nnet(Survived ~ ., data=train_data, size=3) # size: 은닉층 개수
x <- subset(test_data, select = -Survived)
pred <- predict(model.nnet, x, type = 'class')
head(pred)
mean(pred == y)
table(pred, test_data$Survived)
library(e1071)
model <- svm(Survived ~ ., data = train_data)
pred <- predict(model, x)
head(pred)
mean(pred == y)
table(pred, test_data$Survived)
str(train_df_T)
nrow(subset(train_df_T, train_df_T$Survived == 0))
nrow(subset(train_df_T, train_df_T$Survived == 1))
death <- subset(train_df_T, train_df_T$Survived == 0)
deathId <- rownames(death)
alive <- subset(train_df_T, train_df_T$Survived == 1)
aliveId <- rownames(alive)
traindeath <-sort(sample(deathId, 342))
aliveId
trainAlive
regression <- read.csv("./Data/regression.csv")
head(regression)
str(regression)
summary(regression$Height)
summary(regression$Weight)
plot(regression$Height, regression$Weight)
cor(regression$Height, regression$Weight)
#tilt
#회기선 (중심선, 평균선)
plot(regression$Weight ~ regression$Height)
#회귀식 : lm(종속변수~독립변수)
r <- lm(regression$Weight ~ regression$Height)
abline(r, col = 'red')
summary(r)
#공식
r
0.6147 * 170 + (-40.8659)
# 표준오차를 적용한 키가 170인 사람의 몸무게 (+-표준오차)
paste(0.6147 * 170 + (-40.8659) - 6.355, "~", 0.6147 * 170 + (-40.8659) + 6.355)
iq <- read.csv('./Data/IQ.csv')
head(iq)
str(iq)
cor(iq$다니는.학원수, iq$성적)
cor(iq$TV시청.시간, iq$성적)
cor(iq$게임하는.시간, iq$성적)
cor(iq$IQ, iq$성적)
plot(iq$IQ, iq$성적)
r1 <- lm(iq$성적 ~ iq$IQ)
abline(r1, col='red')
summary(r1)
r1
paste((0.6714*126 + (-5.2918)) - 3.322, "~", (0.6714*126 + (-5.2918)) + 3.322)
cor(iq$다니는.학원수, iq$성적)
cor(iq$TV시청.시간, iq$성적)
cor(iq$게임하는.시간, iq$성적)
cor(iq$IQ, iq$성적)
plot(iq$다니는.학원수, iq$성적)
r2 <- lm(iq$성적 ~ iq$다니는.학원수)
abline(r2, col='red')
summary(r2)
r2
iq
iq[, -1]
#숫자로만 상관계수 분석해야 되므로 문자 칼럼 지우기
a <- cor(iq[, -1])
iq
plot(iq$다니는.학원수, iq$성적)
r2 <- lm(iq$성적 ~ iq$다니는.학원수)
abline(r2, col='red')
summary(r2)
r2
data('attitude')
help(attitude)
regression <- read.csv("./Data/regression.csv")
head(regression)
str(regression)
summary(regression$Height)
summary(regression$Weight)
plot(regression$Height, regression$Weight)
cor(regression$Height, regression$Weight)
#tilt
#회기선 (중심선, 평균선)
plot(regression$Weight ~ regression$Height)
#회귀식 : lm(종속변수~독립변수)
r <- lm(regression$Weight ~ regression$Height)
abline(r, col = 'red')
summary(r)
#공식
r
0.6147 * 170 + (-40.8659)
# 표준오차를 적용한 키가 170인 사람의 몸무게 (+-표준오차)
paste(0.6147 * 170 + (-40.8659) - 6.355, "~", 0.6147 * 170 + (-40.8659) + 6.355)
iq <- read.csv('./Data/IQ.csv')
head(iq)
str(iq)
cor(iq$다니는.학원수, iq$성적)
cor(iq$TV시청.시간, iq$성적)
cor(iq$게임하는.시간, iq$성적)
cor(iq$IQ, iq$성적)
plot(iq$IQ, iq$성적)
r1 <- lm(iq$성적 ~ iq$IQ)
abline(r1, col='red')
summary(r1)
r1
paste((0.6714*126 + (-5.2918)) - 3.322, "~", (0.6714*126 + (-5.2918)) + 3.322)
cor(iq$다니는.학원수, iq$성적)
cor(iq$TV시청.시간, iq$성적)
cor(iq$게임하는.시간, iq$성적)
cor(iq$IQ, iq$성적)
plot(iq$다니는.학원수, iq$성적)
r2 <- lm(iq$성적 ~ iq$다니는.학원수)
abline(r2, col='red')
summary(r2)
r2
iq
iq[, -1]
#숫자로만 상관계수 분석해야 되므로 문자 칼럼 지우기
a <- cor(iq[, -1])
iq
plot(iq$다니는.학원수, iq$성적)
r2 <- lm(iq$성적 ~ iq$다니는.학원수)
abline(r2, col='red')
summary(r2)
r2
data('attitude')
help(attitude)
regression <- read.csv("./Data/regression.csv")
head(regression)
str(regression)
summary(regression$Height)
summary(regression$Weight)
plot(regression$Height, regression$Weight)
cor(regression$Height, regression$Weight)
#tilt
#회기선 (중심선, 평균선)
plot(regression$Weight ~ regression$Height)
#회귀식 : lm(종속변수~독립변수)
r <- lm(regression$Weight ~ regression$Height)
abline(r, col = 'red')
summary(r)
#공식
r
0.6147 * 170 + (-40.8659)
# 표준오차를 적용한 키가 170인 사람의 몸무게 (+-표준오차)
paste(0.6147 * 170 + (-40.8659) - 6.355, "~", 0.6147 * 170 + (-40.8659) + 6.355)
iq <- read.csv('./Data/IQ.csv')
head(iq)
str(iq)
cor(iq$다니는.학원수, iq$성적)
cor(iq$TV시청.시간, iq$성적)
cor(iq$게임하는.시간, iq$성적)
cor(iq$IQ, iq$성적)
plot(iq$IQ, iq$성적)
r1 <- lm(iq$성적 ~ iq$IQ)
abline(r1, col='red')
summary(r1)
r1
paste((0.6714*126 + (-5.2918)) - 3.322, "~", (0.6714*126 + (-5.2918)) + 3.322)
cor(iq$다니는.학원수, iq$성적)
cor(iq$TV시청.시간, iq$성적)
cor(iq$게임하는.시간, iq$성적)
cor(iq$IQ, iq$성적)
plot(iq$다니는.학원수, iq$성적)
r2 <- lm(iq$성적 ~ iq$다니는.학원수)
abline(r2, col='red')
summary(r2)
r2
iq
iq[, -1]
#숫자로만 상관계수 분석해야 되므로 문자 칼럼 지우기
a <- cor(iq[, -1])
iq
plot(iq$다니는.학원수, iq$성적)
r2 <- lm(iq$성적 ~ iq$다니는.학원수)
abline(r2, col='red')
summary(r2)
r2
data('attitude')
help(attitude)
head(attitude)
str(attitude)
plot(attitude)
#.의 의미: rating 제외 전부
model <- lm(rating~ ., data=attitude)
model
summary(model)
cor(attitude)
reduced <- step(model, direction = 'backward')
summary(reduced)
reduced
str(iris)
iris12 <- iris
iris12$Species <- as.numeric(iris$Species)
plot(iris12)
head(iris12)
model1 <- lm(Species ~ ., data=iris12)
model1
summary(model1)
cor(iris12)
reduced12 <- step(model1, direction = 'backward')
summary(reduced12)
reduced12
head(iris12)
5.1*(-0.1362)+1.4*0.2521+0.2*0.5869+1.14469+0.2187
4.9*(-0.1362)+1.4*0.2521+0.2*0.5869+1.14469+0.2187
head(pcos)
pcos
pcos <- read.csv("./Data/pcos_final2.csv")
pcos
pcos <- read.csv("./Data/pcos_final2.csv")
pcos
pcos <- read.csv("./Data/pcos_final2.csv")
pcos[-1]
pcos <- read.csv("./Data/pcos_final2.csv")
pcos <- pcos[-1]
data('attitude')
help(attitude)
head(attitude)
str(attitude)
plot(attitude)
#.의 의미: rating 제외 전부
model <- lm(rating~ ., data=attitude)
model
pcos <- read.csv("./Data/pcos_final2.csv")
pcos <- pcos[-1]
pcos
model <- lm(PCOS..Y.N.~ ., data=pcos)
model
pcos <- read.csv("./Data/pcos_pure.csv.csv")
pcos <- read.csv("./Data/pcos_pure.csv")
pcos
pcos <- read.csv("./Data/pcos_pure.csv")
pcos <- pcos[-1]
pcos
model <- lm(PCOS..Y.N.~ ., data=pcos)
model
summary(model)
cor(attitude)
cor(pcos)
pcos.str
summary(pcos)
reduced <- step(model, direction = 'backward')
str(pcos)
pcos[,:-3]
pcos[-3]
pcos[,:-3]
pcos[,(:-3)]
pcos[,(:-3)]
pcos[,c(:-3)]
pcos[,c(-3)]
pcos[1]
pcos[,1]
pcos[,c(1:2)]
pcos[,c(:25)]
pcos[,c(:1)]
pcos[,c(1)]
pcos[,c(0:25)]
pcos[,c(0:24)]
pcos[,c(0:23)]
pcos <- pcos[,c(0:23)]
model <- lm(PCOS..Y.N.~ ., data=pcos)
model
summary(model)
reduced <- step(model, direction = 'backward')
library(Rserve)
Rserve(FALSE, port=6311, args = '--RS-encoding utf8 --no-save')
#6311은 Rserve 에 정해진 포트 번호 (ex. http port 번호: 8080과 같다.)
library(Rserve)
Rserve(FALSE, port=6311, args = '--RS-encoding utf8 --no-save')
#6311은 Rserve 에 정해진 포트 번호 (ex. http port 번호: 8080과 같다.)
library(Rserve)
Rserve(FALSE, port=6311, args = '--RS-encoding utf8 --no-save')
#6311은 Rserve 에 정해진 포트 번호 (ex. http port 번호: 8080과 같다.)
library(Rserve)
Rserve(FALSE, port=6311, args = '--RS-encoding utf8 --no-save')
#6311은 Rserve 에 정해진 포트 번호 (ex. http port 번호: 8080과 같다.)
library(Rserve)
Rserve(FALSE, port=6311, args = '--RS-encoding utf8 --no-save')
#6311은 Rserve 에 정해진 포트 번호 (ex. http port 번호: 8080과 같다.)
library(Rserve)
Rserve(FALSE, port=6311, args = '--RS-encoding utf8 --no-save')
#6311은 Rserve 에 정해진 포트 번호 (ex. http port 번호: 8080과 같다.)
library(Rserve)
Rserve(FALSE, port=6311, args = '--RS-encoding utf8 --no-save')
#6311은 Rserve 에 정해진 포트 번호 (ex. http port 번호: 8080과 같다.)
